<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Curiosity Driven Writing</title>
    <link>http://satoru.rocks/blog/</link>
    <description>Recent content in Blogs on Curiosity Driven Writing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 May 2016 17:16:52 +0800</lastBuildDate>
    <atom:link href="http://satoru.rocks/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Be careful of shared array</title>
      <link>http://satoru.rocks/2016/05/be-careful-of-shared-array/</link>
      <pubDate>Fri, 13 May 2016 17:16:52 +0800</pubDate>
      
      <guid>http://satoru.rocks/2016/05/be-careful-of-shared-array/</guid>
      <description>&lt;p&gt;In Go, when you take a slice of an existing slice, you get two slices sharing the same underlying array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    s1 := []int{1, 2, 3}
    // A slice of s1 =&amp;gt; {2, 3}
    s2 := s1[1:3]

    // The 0th element of s2 is the 1th element of s1
    s2[0] = 42

    fmt.Println(s1)  // [1 42 3]
    fmt.Println(s2)  // [42 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can append items to slices with the built-in function &lt;code&gt;append&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    s1 := []int{1, 2, 3}
    // A slice of s1 =&amp;gt; {2}
    s2 := s1[1:2]

    s2 = append(s2, 42)

    fmt.Println(s1)  // [1 2 42]
    fmt.Println(s2)  // [2 42]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buf if there&amp;rsquo;s not available capacity for appending new items, &lt;code&gt;append&lt;/code&gt; would create a new bigger underlying array for you, and the returned slice will point to this new array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    s1 := []int{1, 2, 3}
    // Create a slice of s1 =&amp;gt; {2, 3}
    // The len of s2 would be 2, and the capacity would also be 2
    // Which is to say, s2 is full
    s2 := s1[1:3]

    // Not available capacity for the new item
    // `append` helps us replace the underlying array with a bigger one
    s2 = append(s2, 42)

    // Now that the underlying array for s2 is a different one
    // updating an item of s2 would have no effect on s1
    s2[0] = 11
    
    fmt.Println(s1) // [1 2 3]
    fmt.Println(s2) // [11 3 42]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we need to be careful, two related slices may independently grow and change their underlying array.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>what you need to know about aws cloudformation</title>
      <link>http://satoru.rocks/2016/05/what-you-need-to-know-about-aws-cloudformation/</link>
      <pubDate>Tue, 10 May 2016 09:04:07 +0800</pubDate>
      
      <guid>http://satoru.rocks/2016/05/what-you-need-to-know-about-aws-cloudformation/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;CloudFormattion is free to use;&lt;/li&gt;
&lt;li&gt;You supply a template and any required parameters to CloudFormation to create or update a stack;&lt;/li&gt;
&lt;li&gt;A template is a JSON-formatted text file (&lt;a href=&#34;https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance_With_RDS.template&#34;&gt;example&lt;/a&gt;);&lt;/li&gt;
&lt;li&gt;Parameter can be used to specify sensitive information which you don&amp;rsquo;t want to store in the template;&lt;/li&gt;
&lt;li&gt;If not all resources are created or updated successfully, CloudFormation will rollback every change;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>define and run cython function with ipython</title>
      <link>http://satoru.rocks/2016/05/define-and-run-cython-function-with-ipython/</link>
      <pubDate>Tue, 10 May 2016 08:32:28 +0800</pubDate>
      
      <guid>http://satoru.rocks/2016/05/define-and-run-cython-function-with-ipython/</guid>
      <description>&lt;p&gt;I learned this trick in the book &lt;a href=&#34;http://www.amazon.com/Cython-Kurt-W-Smith/dp/1491901551/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1424746332&amp;amp;sr=1-1&amp;amp;keywords=cython&#34;&gt;Cython: A Guide for Python Programmer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After having both &lt;em&gt;Cython&lt;/em&gt; and &lt;em&gt;IPython&lt;/em&gt; installed, we can load the &lt;em&gt;cythonmagic&lt;/em&gt; extension with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;In [1]: %load_ext cythonmagic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have 3 extra magic functions in the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%%cython&lt;/code&gt; will cythonize and compile contents of the code cell.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;In [4]: %%cython
   ...: def sum_up(*numbers):
   ...:     cdef int s = 0
   ...:     for n in numbers:
   ...:         s += n
   ...:     return s
   ...:
In [5]: sum_up(1, 2, 3)
Out[5]: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%%cython_inline&lt;/code&gt; simply passes the body of the cell to &lt;a href=&#34;http://docs.cython.org/src/reference/compilation.html#compiling-with-cython-inline&#34; target=&#34;_blank&#34;&gt;Cython.inline&lt;/a&gt;
and returns the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;In [16]: x = 3.14

In [17]: y = 2

In [18]: %%cython_inline
   ....: return x * y
   ....:
Out[18]: 6.28
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%%cython_pyximport&lt;/code&gt; is similar to &lt;code&gt;%%cython&lt;/code&gt;, except that the contents of the code shell are written to a &lt;code&gt;.pyx&lt;/code&gt; file in the current working directory and imported using &lt;code&gt;pyximport&lt;/code&gt;, and a module name is required.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;In [21]: %%cython_pyximport double
....: def f(x):
....:     return 2.0 * x
....:
In [22]: !ls *.pyx
double.pyx
In [23]: f(4)
Out[23]: 8.0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>