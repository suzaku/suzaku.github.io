<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Curiosity Driven Writing</title>
    <link>http://satoru.rocks/tags/development/</link>
    <description>Recent content in Development on Curiosity Driven Writing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Aug 2018 11:55:00 +0800</lastBuildDate>
    
	<atom:link href="http://satoru.rocks/tags/development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fastest way to serialize an array in Python</title>
      <link>http://satoru.rocks/2018/08/fastest-way-to-serialize-array/</link>
      <pubDate>Sun, 19 Aug 2018 11:55:00 +0800</pubDate>
      
      <guid>http://satoru.rocks/2018/08/fastest-way-to-serialize-array/</guid>
      <description>To kick start the discussion, let&amp;rsquo;s first assume that we have the following 2-D numpy array:
import numpy as np matrix = np.random.random((10000, 384)).astype(np.float32) Approaches tried  The built-in pickle
In Python, the built-in pickle module is often used to serialize/deserialize data. Here&amp;rsquo;s how it works:
import pickle pickled_dumped = pickle.dumps(matrix, protocol=pickle.HIGHEST_PROTOCOL) pickle.loads(pickled_dumped)  MessagePack
MessagePack is known to a fast and compact serialization format. But it can&amp;rsquo;t serialize a numpy array directly, so let&amp;rsquo;s first assume that we&amp;rsquo;ll use a nested Python list instead.</description>
    </item>
    
    <item>
      <title>Be careful of shared array</title>
      <link>http://satoru.rocks/2016/05/be-careful-of-shared-array/</link>
      <pubDate>Fri, 13 May 2016 17:16:52 +0800</pubDate>
      
      <guid>http://satoru.rocks/2016/05/be-careful-of-shared-array/</guid>
      <description>In Go, when you take a slice of an existing slice, you get two slices sharing the same underlying array.
package main import &amp;#34;fmt&amp;#34; func main() { s1 := []int{1, 2, 3} // A slice of s1 =&amp;gt; {2, 3}  s2 := s1[1:3] // The 0th element of s2 is the 1th element of s1  s2[0] = 42 fmt.Println(s1) // [1 42 3]  fmt.Println(s2) // [42 3] } And we can append items to slices with the built-in function append.</description>
    </item>
    
  </channel>
</rss>