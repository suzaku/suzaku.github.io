<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on Curiosity Driven Writing</title>
    <link>http://satoru.rocks/categories/development/</link>
    <description>Recent content in Development on Curiosity Driven Writing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 May 2016 17:16:52 +0800</lastBuildDate>
    <atom:link href="http://satoru.rocks/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Be careful of shared array</title>
      <link>http://satoru.rocks/2016/05/be-careful-of-shared-array/</link>
      <pubDate>Fri, 13 May 2016 17:16:52 +0800</pubDate>
      
      <guid>http://satoru.rocks/2016/05/be-careful-of-shared-array/</guid>
      <description>&lt;p&gt;In Go, when you take a slice of an existing slice, you get two slices sharing the same underlying array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    s1 := []int{1, 2, 3}
    // A slice of s1 =&amp;gt; {2, 3}
    s2 := s1[1:3]

    // The 0th element of s2 is the 1th element of s1
    s2[0] = 42

    fmt.Println(s1)  // [1 42 3]
    fmt.Println(s2)  // [42 3]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can append items to slices with the built-in function &lt;code&gt;append&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    s1 := []int{1, 2, 3}
    // A slice of s1 =&amp;gt; {2}
    s2 := s1[1:2]

    s2 = append(s2, 42)

    fmt.Println(s1)  // [1 2 42]
    fmt.Println(s2)  // [2 42]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Buf if there&amp;rsquo;s not available capacity for appending new items, &lt;code&gt;append&lt;/code&gt; would create a new bigger underlying array for you, and the returned slice will point to this new array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    s1 := []int{1, 2, 3}
    // Create a slice of s1 =&amp;gt; {2, 3}
    // The len of s2 would be 2, and the capacity would also be 2
    // Which is to say, s2 is full
    s2 := s1[1:3]

    // Not available capacity for the new item
    // `append` helps us replace the underlying array with a bigger one
    s2 = append(s2, 42)

    // Now that the underlying array for s2 is a different one
    // updating an item of s2 would have no effect on s1
    s2[0] = 11
    
    fmt.Println(s1) // [1 2 3]
    fmt.Println(s2) // [11 3 42]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we need to be careful, two related slices may independently grow and change their underlying array.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>